
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "share":
        await query.edit_message_text("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /share <user_id>, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–æ–º.")
    elif query.data == "unshare":
        await query.edit_message_text("üßπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /unshare <user_id>, —á—Ç–æ–±—ã –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø.")
    elif query.data == "shared_list":
        from db import get_shared_with
        shared_ids = get_shared_with(user_id)
        if not shared_ids:
            await query.edit_message_text("üë§ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª—Å—è.")
        else:
            lines = [f"üîê –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –¥–ª—è:"]
            for uid in shared_ids:
                lines.append(f"‚Ä¢ ID: `{uid}`")
            await query.edit_message_text("\n".join(lines), parse_mode="Markdown")
    else:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
